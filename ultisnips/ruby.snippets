# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rescue-e "" b
rescue => _e
endsnippet

snippet rescue-e-binding "" b
rescue => _e
	binding.pry
	raise _e
endsnippet

snippet logger_stdout "" b
ActiveRecord::Base.logger = Logger.new(STDOUT)
endsnippet

snippet logger_nil "" b
ActiveRecord::Base.logger = nil
endsnippet

snippet pex "" b
p ex.class
p ex.message
p ex.backtrace
endsnippet

snippet test_my_method "" b
require "#{MACAU_ROOT}/../test_my_method"
include TestMyMethod
init_log({"name" => "#{MACAU_ROOT}/log/test.log", "benchmark" => true})
endsnippet

snippet strftime "" w
strftime("%Y-%m-%d %H:%M:%S")
endsnippet

snippet find_first "" w
find(:first, :conditions => [])
	endsnippet

snippet find_all "" w
find(:all, :conditions => [])
endsnippet

snippet require_active_support "" b
require 'active_support/all'
endsnippet

snippet tap_pp "" w
tap(&method(:pp))
endsnippet

snippet benchmark "" b
require 'benchmark'
Benchmark.bm ${1:COUNT} do |r|
  r.report "${2:NAME}" do
    ${3:CONTEXT}
  end
end
endsnippet

snippet Time_now_ms "" w
Time.now.instance_eval { '%s.%03d' % [strftime('%Y/%m/%d %H:%M:%S'), (usec / 1000.0).round] }
endsnippet

snippet binding_pry "" w
binding.pry
endsnippet

snippet pry "" w
binding.pry
endsnippet

snippet tap_pry "" w
tap{binding.pry}
endsnippet

snippet numericality_integer "" w
numericality: { only_integer: true }
endsnippet

snippet sequence_text "" b
sequence(:${1:COLUMN}) { |i| "$1_#{i}" }
${2}
endsnippet

snippet sequence_count "" b
sequence(:${1:COLUMN}) { |i| i }
${2}
endsnippet

snippet factory_define "" b
FactoryBot.define do
	factory :${1}, class: CmCore::${2} do
		${3}
	end
end
endsnippet

snippet model_cm_core_ar "" b
module CmCore
	class ${1} < CmCore::ApplicationRecord
		${2}
	end
end
endsnippet

snippet enum_cm_core "" b
module CmCore
	module Enums
		module ${1:NAME}
			extend ActiveSupport::Concern
			included do
				enum ${2:SMALLNAME}: {
					${3}
				}, _prefix: true
			end
		end
	end
end
endsnippet

snippet enum_cm_core_with_directory "" b
module CmCore
	module Enums
		module ${1:GROUP}
			module ${2:NAME}
				extend ActiveSupport::Concern
				included do
					enum ${3:SMALLNAME}: {
						${4}
					}, _prefix: true
				end
			end
		end
	end
end
endsnippet

snippet create_table "" b
# encoding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :
create_table "${1:TABLE}", force: :cascade, comment: "${2:T_NAME}" do |t|
	${3}
end
endsnippet

snippet trow "" b
t.${1:TYPE} "${2:NAME}", ${4} comment: "${3:COMMENT}"
endsnippet

snippet trow_enum "" b
t.integer  "${2:NAME}", default: ${4:DEFAULT}, null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_enum_force_select "" b
t.integer  "${2:NAME}",                        null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_enum_allow_nil "" b
t.integer  "${2:NAME}",                                     comment: "${3:COMMENT}"
endsnippet

snippet trow_text "" b
t.text     "${2:NAME}", default: "",    null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_integer "" b
t.integer  "${2:NAME}",                 null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_integer_default0 "" b
t.integer  "${2:NAME}", default: 0,     null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_decimal "" b
t.decimal  "${2:NAME}", precision: ${3:PRECISION}, scale: ${4:PRECISION}, default: "0.0", null: false, comment: "${5:COMMENT}"
endsnippet

snippet trow_bool "" b
t.boolean  "${2:NAME}", default: false, null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_bigint "" b
t.bigint   "${2:NAME}",                 null: false, comment: "${3:COMMENT}"
endsnippet

snippet trow_datetime "" b
t.datetime "${1:NAME}", ${3}comment: "${2:COMMENT}"
endsnippet

snippet trow_jsonb_hash "" b
t.jsonb    "${1:NAME}", default: {}, null: false, comment: "${2: COMMENT}"
endsnippet

snippet trow_jsonb_array "" b
t.jsonb    "${1:NAME}", default: [], null: false, comment: "${2: COMMENT}"
endsnippet

snippet trow_jsonb_nil "" b
t.jsonb    "${1:NAME}",                           comment: "${2: COMMENT}"
endsnippet

snippet trow_operator "" b
t.bigint   "created_by",             null: false, comment: "登録した担当者ID"
t.bigint   "updated_by",             null: false, comment: "更新した担当者ID"
t.datetime "created_at",             null: false
t.datetime "updated_at",             null: false
endsnippet

snippet trow_operate_at "" b
t.datetime "created_at",             null: false
t.datetime "updated_at",             null: false
endsnippet

snippet tindex "" b
t.index ["${1:TARGET}"], name: "index_${2:TABLE_NAME}_on_$1"
${3}
endsnippet

snippet tforeign_key "" b
t.foreign_key "${1:TO_TABLE}", name: "fk_${2:TO_ID}_id"
endsnippet

snippet transaction "" b
ActiveRecord::Base.transaction do
	${1}
end
endsnippet

snippet rspec_init "" b
require("rails_helper")

describe(${1: KLASS}) do
	${2: CONTENTS}
end
endsnippet

snippet rspec_fuubar_autoreflesh_disable "" b
RSpec.configure do |config|
	config.fuubar_auto_refresh = false
end
endsnippet

snippet fuubar_autoreflesh_disable "" b
RSpec.configure do |config|
	config.fuubar_auto_refresh = false
end
endsnippet

snippet vcr_cassette_name "" w
vcr: { cassette_name: "${1:CASSETTE_NAME}" }
endsnippet

snippet p_vcr_yaml "" b
require 'active_support/all'
require 'yaml'
path = "${1:PATH}"
res_body = YAML.load(File.read(path)).dig("http_interactions", 0, "response", "body", "string")
pp JSON.parse(res_body)
endsnippet

snippet example_error "" b
example "エラーになる" do
	${1}
end
endsnippet

snippet example_success_regist "" b
example "正常に登録される" do
	${1}
end
endsnippet

snippet raise_not_implement "" b
raise(NotImplementedError)
endsnippet

snippet concern_included "" b
extend ActiveSupport::Concern

included do
	${1}
end
endsnippet

snippet concern_class_methods "" b
extend ActiveSupport::Concern

class_methods do
	${1}
end
endsnippet

snippet describe "" b
describe "${1:DESCRIBE}" do${2}
end
endsnippet

snippet context "" b
context "${1:CONTEXT}" do${2}
end
endsnippet

snippet context_vcr "" b
context "${1:CONTEXT}", vcr: { cassette_name: "${2:CASSETTE_NAME}" } do${3}
end
endsnippet

snippet example "" b
example "${1:EXAMPLE}" do${2}
end
endsnippet

snippet context_with_example "" b
context "${1:CONTEXT}" do
	example "${2:EXAMPLE}" do${3}
	end
end
${4}
endsnippet

snippet allow_mock_return "rspec allow mock to return" w
allow(${1:NAME}).to(receive(:${2:METHOD}).and_return(${3:RETURN}))
endsnippet

snippet allow_any_instance_mock_return "rspec allow mock to return" w
allow_any_instance_of(${1:NAME}).to(receive(:${2:METHOD}).and_return(${3:RETURN}))
endsnippet

snippet expect_any_instance_mock_once "rspec expect mock called once" w
expect_any_instance_of(${1:NAME}).to(receive(:${2:METHOD}).once)
endsnippet

snippet allow_mock_raise "rspec allow mock to raise" w
allow(${1:NAME}).to(receive(:${2:METHOD}).and_raise(${3:ERROR}))
endsnippet

snippet extend_concern "extend active_support concern" b
extend ActiveSupport::Concern

included do${1}
end

class_methods do
end
endsnippet

snippet freeze_hash "freeze nested object" i
map(&:freeze).to_h.freeze
endsnippet

snippet freeze_single_array "freeze nested object" i
map(&:freeze).freeze
endsnippet

snippet timetravel_freeze "timetravel freeze" b
around do |e|
	travel_to(${1:TIME}) { e.run }
end
endsnippet

snippet around_travel_to "timetravel freeze" b
around do |e|
	travel_to(${1:TIME}) { e.run }
end
endsnippet

snippet rubocop_disable "rubocop_disable" i
rubocop:disable ${1:NAME}
endsnippet

snippet proc "" i
-> { ${1} }
endsnippet

snippet proc_r "" i
->(r) { r.${1} }
endsnippet

snippet dir_require "" b
Dir[__dir__ + "/`!v expand("%:t:r")`/*.rb"].each { |p| require p }
endsnippet
snippet require_dir "" b
Dir[__dir__ + "/`!v expand("%:t:r")`/*.rb"].each { |p| require p }
endsnippet
